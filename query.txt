--a)All the records from one table (table ACTOR)
SELECT * 
FROM ACTOR;

--b)3 columns(City, Country and Gender) from Viewer Table in sorted in reverse alphabetical order of the city
SELECT CITY, COUNTRY, GENDER
FROM VIEWER
ORDER BY CITY DESC;

--c1) The name, surname and the city of the actors living in NEW YORK

SELECT NAME, SURNAME, CITY 
FROM ACTOR 
WHERE CITY='NEW YORK'; 

--c2) Viewers with their surname has an A and ending with an S 

SELECT *
FROM VIEWER
WHERE SURNAME LIKE  '%A%S';

--c3) The name, surname and country of actors they are not from USA and France.

SELECT NAME, SURNAME, COUNTRY
FROM ACTOR
WHERE COUNTRY NOT IN ('US','FR'); 

--c4) Viewership in the summer of 2023

SELECT * 
FROM VIEWERSHIP
WHERE DOV BETWEEN '01-JUN-2023' AND '31-AUG-2023'; 

--Alternative query: 

--SELECT * 
--FROM VIEWERSHIP
--WHERE TO_CHAR(DOV,'YYYY')=2023 AND TO_CHAR(DOV,'MM') BETWEEN 6 AND 8; 

--d1)The inner join of actors and their roles. In other words, the roles and the actors who played them (Since every role has an actor in the database - PK)

SELECT A.NAME, A.SURNAME, C.ROLES ACTOR_ROLE
FROM ACTOR A
JOIN CASTING C
ON A.ACTOR_ID=C.ACTOR_ID; 

--d2)Shows the series titles and the actors who played in the series. Again inner join, actors who do not participate in a series are excluded. 

SELECT S.TITLE, A.NAME, A.SURNAME 
FROM ACTOR A 
JOIN CASTING C ON A.ACTOR_ID=C.ACTOR_ID 
JOIN SERIES S ON S.SERIES_ID=C.SERIES_ID; 

--d3)Shows the series watched by viewers

SELECT DISTINCT V.VIEWER_ID, V.SURNAME VIEWER_SURNAME, S.TITLE SERIES_TITLE  
FROM VIEWER V 
JOIN VIEWERSHIP VS ON VS.VIEWER_ID=V.VIEWER_ID 
JOIN EPISODE E ON VS.EPISODE_ID=E.EPISODE_ID  
JOIN SERIES S ON S.SERIES_ID=E.SERIES_ID; 

--e1)Actors with surname starts with C and ends with E.

SELECT *
FROM ACTOR
WHERE SURNAME LIKE 'C%E';

--e2)Number of viewers per country

SELECT COUNTRY, COUNT(COUNTRY) NUMBER_OF_VIEWERS
FROM VIEWER
GROUP BY COUNTRY;

--e3)Most popular episode

SELECT V.EPISODE_ID, E.TITLE, COUNT(V.EPISODE_ID) EPISODE_VIEWS 
FROM VIEWERSHIP V INNER JOIN EPISODE E ON V.EPISODE_ID=E.EPISODE_ID
GROUP BY V.EPISODE_ID, E.TITLE
ORDER BY EPISODE_VIEWS DESC
FETCH FIRST ROW WITH TIES; 

--Alternative
SELECT  V.EPISODE_ID, E.TITLE, COUNT(V.EPISODE_ID) EPISODE_VIEWS 
FROM VIEWERSHIP V INNER JOIN EPISODE E ON V.EPISODE_ID=E.EPISODE_ID
GROUP BY V.EPISODE_ID, E.TITLE
HAVING COUNT(V.EPISODE_ID)>=
    (SELECT MAX(C_EPISODE) 
    FROM (SELECT EPISODE_ID, COUNT(EPISODE_ID) C_EPISODE FROM VIEWERSHIP GROUP BY EPISODE_ID));

-- e4) Which series was the most popular (was viewed the most times)?

SELECT S.TITLE, COUNT(V.EPISODE_ID) SERIES_VIEWS 
FROM VIEWERSHIP V 
JOIN EPISODE E ON E.EPISODE_ID=V.EPISODE_ID 
JOIN SERIES S ON S.SERIES_ID=E.SERIES_ID 
GROUP BY S.TITLE 
ORDER BY SERIES_VIEWS DESC
FETCH FIRST ROW WITH TIES;

-- e5) Show the actors (surname and name and ID) in an ascending order and the Series they participated.
SELECT A.ACTOR_ID, A.NAME, A.SURNAME, C.TITLE
FROM ACTOR A 
LEFT JOIN CASTING B ON A.ACTOR_ID=B.ACTOR_ID 
LEFT JOIN SERIES C ON B.SERIES_ID=C.SERIES_ID
ORDER BY A.SURNAME;

-- e6) Which actor (surname and name and ID) has participated in the most series?
SELECT A.ACTOR_ID, B.NAME, B.SURNAME, COUNT(C.TITLE) "NUMBER_OF_SERIES"
FROM CASTING A 
LEFT JOIN ACTOR B ON A.ACTOR_ID=B.ACTOR_ID 
LEFT JOIN SERIES C ON A.SERIES_ID=C.SERIES_ID
GROUP BY  A.ACTOR_ID, B.NAME, B.SURNAME
ORDER BY "NUMBER_OF_SERIES" DESC
FETCH FIRST ROW WITH TIES;


-- e7) Which actor (surname and name and ID) has participated in the most episodes?
-- Assumption: Each actor participates in every episode of the series
SELECT A.ACTOR_ID, A.NAME, A.SURNAME, COUNT(C.EPISODE_ID) "NUMBER_OF_EPISODES"
FROM ACTOR A
INNER JOIN CASTING B ON A.ACTOR_ID=B.ACTOR_ID
LEFT JOIN EPISODE C ON B.SERIES_ID=C.SERIES_ID
GROUP BY A.ACTOR_ID, A.NAME, A.SURNAME
ORDER BY "NUMBER_OF_EPISODES" DESC
FETCH FIRST ROW WITH TIES;

-- e8) Which series (title) has the most seasons?
SELECT A.SERIES_ID, B.TITLE, COUNT( DISTINCT(A.SEASON)) "NUMBER_OF_SEASONS"
FROM EPISODE A
LEFT JOIN SERIES B ON A.SERIES_ID=B.SERIES_ID
GROUP BY A.SERIES_ID, B.TITLE
ORDER BY "NUMBER_OF_SEASONS" DESC;

-- e9) Which series (title) has the most episodes in total?
SELECT A.SERIES_ID, B.TITLE, COUNT( DISTINCT (A.EPISODE_ID)) "NUMBER_OF_EPISODES"
FROM EPISODE A
LEFT JOIN SERIES B ON A.SERIES_ID=B.SERIES_ID
GROUP BY A.SERIES_ID, B.TITLE
ORDER BY "NUMBER_OF_EPISODES" DESC
FETCH FIRST ROW WITH TIES;

-- e10) How many series were produced between 2000 and 2009?
SELECT TITLE, PROD_YEAR 
FROM SERIES
WHERE PROD_YEAR BETWEEN 2000 AND 2009;

-- e11) Show the actors that were born in July (regardless the year).
SELECT NAME, SURNAME, DOB
FROM ACTOR
WHERE TO_CHAR(DOB, 'MON')='JUL';

-- e12) How many actors that haven’t participated in a series exist in the database?
SELECT NAME, SURNAME
FROM ACTOR WHERE ACTOR_ID NOT IN ( SELECT ACTOR_ID FROM CASTING);

-- e13) Show the oldest female viewer.
SELECT NAME, SURNAME, DOB
FROM VIEWER
WHERE GENDER='F'
ORDER BY DOB
FETCH FIRST ROW WITH TIES;

-- e14) Which viewers live in an address that the street has the word “SAINT” in it?
SELECT NAME, SURNAME, ADDRESS
FROM VIEWER
WHERE ADDRESS LIKE '%SAINT%';

-- e15) Show the series in descending order based on the average of their episodes’ length.
SELECT A.SERIES_ID, B.TITLE, ROUND(AVG(A.LENGTH),2) "AVERAGE_LENGTH"
FROM EPISODE A LEFT JOIN SERIES B ON A.SERIES_ID=B.SERIES_ID 
GROUP BY A.SERIES_ID, B.TITLE
ORDER BY "AVERAGE_LENGTH" DESC;

-- e16) Which viewer has watched the most episodes?
SELECT A.VIEWER_ID, B.NAME, B.SURNAME, COUNT(A.EPISODE_ID) "NUMBER_OF_EPISODES"
FROM VIEWERSHIP A 
LEFT JOIN VIEWER B ON A.VIEWER_ID=B.VIEWER_ID
GROUP BY A.VIEWER_ID, B.NAME, B.SURNAME
ORDER BY "NUMBER_OF_EPISODES" DESC
FETCH FIRST ROW WITH TIES;

--e17) Which viewer in “THESSALONIKI” has watched the most episodes?
SELECT A.VIEWER_ID, B.NAME, B.SURNAME, COUNT(A.EPISODE_ID) "NUMBER_OF_EPISODES"
FROM VIEWERSHIP A 
INNER JOIN (SELECT * FROM VIEWER WHERE CITY='THESSALONIKI') B ON A.VIEWER_ID=B.VIEWER_ID
GROUP BY A.VIEWER_ID, B.NAME, B.SURNAME
ORDER BY "NUMBER_OF_EPISODES" DESC
FETCH FIRST ROW WITH TIES;

--e18) Show the most popular series (the series that its episodes were watched the most times) per gender.
    WITH RankedSeriesViews AS (
    SELECT
        S.TITLE,
        V.GENDER,
        COUNT(E.SERIES_ID) AS SERIES_VIEWS,
        RANK() OVER (PARTITION BY V.GENDER ORDER BY COUNT(E.SERIES_ID) DESC) AS rnk
    FROM
        VIEWER V
        JOIN VIEWERSHIP VS ON V.VIEWER_ID = VS.VIEWER_ID
        JOIN EPISODE E ON E.EPISODE_ID = VS.EPISODE_ID
        JOIN SERIES S ON S.SERIES_ID = E.SERIES_ID
    GROUP BY
        S.TITLE, V.GENDER
)
SELECT
    TITLE,
    GENDER,
    SERIES_VIEWS
FROM
    RankedSeriesViews
WHERE
    rnk = 1;
-- Alternative
--SELECT S.TITLE, V.GENDER, COUNT(E.SERIES_ID) SERIES_VIEWS
--FROM VIEWER V 
--JOIN VIEWERSHIP VS ON V.VIEWER_ID=VS.VIEWER_ID
--JOIN EPISODE E ON E.EPISODE_ID=VS.EPISODE_ID
--JOIN SERIES S ON S.SERIES_ID=E.SERIES_ID    
--GROUP BY S.TITLE, V.GENDER 
--ORDER BY SERIES_VIEWS DESC
--FETCH FIRST ROW WITH TIES;

--e19) Assume a username for the viewers is made up of the first 4 letters of the first name added to the first 4 letters of the surname. Write the query
--to create and show the username for each viewer. Do not attempt to input it in the viewers table.

SELECT CONCAT(SUBSTR(NAME, 1, 4),SUBSTR(SURNAME, 1, 4)) AS USERNAME, NAME, SURNAME
FROM VIEWER;

--e20) Show the total length of ALL the series (total length for all episodes) per year the series were produced.

SELECT S.PROD_YEAR, SUM(E.LENGTH) TOTAL_LENGTH
FROM EPISODE E
JOIN SERIES S ON S.SERIES_ID=E.SERIES_ID
GROUP BY S.PROD_YEAR
ORDER BY PROD_YEAR;

--e21)additional query, most engaged user. The user whose total UNIQUE episodes views are sum up to more length. The user might have seen an episode two or more times but we count only the UNIQUE episode views.

SELECT V.VIEWER_ID, V.SURNAME, SUM(E.LENGTH) TOTAL_TIME
FROM VIEWER V
JOIN VIEWERSHIP VS ON VS.VIEWER_ID=V.VIEWER_ID
JOIN EPISODE E ON E.EPISODE_ID=VS.EPISODE_ID
GROUP BY V.VIEWER_ID, V.SURNAME
ORDER BY TOTAL_TIME DESC;
